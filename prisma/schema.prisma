// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider           = "prisma-nestjs-graphql"
  output             = "../src/@generated/nestgraphql"
  noTypeId           = true
  noAtomicOperations = true
}

model Account {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String?

  roles  AccountRole[]
  status AccountStatus

  avatarUrl String?

  sessions AccountSession[]

  externalProfiles ExternalProfile[]

  groupMembers      GroupMember[]
  eventApplications EventApplication[]
  notifications     Notification[]

  username String @unique

  chatMembers ChatMember[]
  messages    Message[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  title   String
  message String
  read    Boolean @default(false)
}

enum ExternalProfileProvider {
  GOOGLE
  TELEGRAM
}

model ExternalProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider   ExternalProfileProvider
  externalId String

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  @@unique([provider, externalId])
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum AccountRole {
  ADMIN
  USER
}

model OneTimeCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  telegramId String   @unique
  code       String
  expiresAt  DateTime
}

model Upload {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  filepath         String @unique
  originalFilename String
  extension        String
  size             Int
  mimetype         String

  uploaderIp String
}

model AccountSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  /// @HideField()
  token String @unique

  ipAddr    String
  userAgent String?
  expiresAt DateTime
}

enum GroupType {
  PUBLIC
  PRIVATE
}

enum GroupStatus {
  OPEN
  CLOSED
}

model Group {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pictureUrl String

  name        String      @unique
  description String
  type        GroupType
  status      GroupStatus

  members GroupMember[]

  events       Event[]
  groupInvites GroupInvite[]
}

model GroupInvite {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  code String @unique
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  role GroupMemberRole @default(MEMBER)

  @@unique([groupId, accountId])
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

enum EventStatus {
  OPEN
  EXPIRED
  CLOSED
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pictureUrl String

  status EventStatus

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  name        String
  description String

  startsAt DateTime
  endsAt   DateTime

  applicationPairs EventApplicationPair[]

  @@unique([groupId, name])
}

model EventApplicationPair {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  applicationFirst        EventApplication @relation("EventApplicationFirstPairs", fields: [eventApplicationFirstId], references: [id])
  eventApplicationFirstId Int

  applicationSecond        EventApplication @relation("EventApplicationSecondPairs", fields: [eventApplicationSecondId], references: [id])
  eventApplicationSecondId Int

  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
}

enum EventApplicationStatus {
  LOOKING_FOR_PAIR
  PAIRED
  GIFT_SENT
  GIFT_RECEIVED
}

model EventApplication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  status EventApplicationStatus

  preferences                 Preference[]
  eventApplicationFirstPairs  EventApplicationPair[] @relation("EventApplicationFirstPairs")
  eventApplicationSecondPairs EventApplicationPair[] @relation("EventApplicationSecondPairs")
}

enum PriceRange {
  MIN_0_MAX_10
  MIN_10_MAX_20
  MIN_20_MAX_30
  NO_MATTER
}

model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  priceRange PriceRange
  likes      String
  dislikes   String
  comment    String

  application   EventApplication? @relation(fields: [applicationId], references: [id])
  applicationId Int?
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  members  ChatMember[]

  eventApplicationPair EventApplicationPair[]
}

model ChatMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?

  role ChatMemberRole @default(MEMBER)
}

enum ChatMemberRole {
  ADMIN
  MEMBER
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?

  text String
}
